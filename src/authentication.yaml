post:
  tags:
    - authentication
  summary: Authenticate User
  description: Use an email and password to authenticate and login a user.
  operationId: loginUser
  consumes:
    - application/json
  produces:
    - application/json
  parameters:
    - in: body
      name: body
      description: User credentials
      required: true
      schema:
        type: object
        properties:
          email:
            description: Email address associated with the user
            type: string
            example: test@example.com
          password:
            description: Password
            type: string
            example: secret
  responses:
    '401':
      description: Unauthorized
      schema:
        type: object
        properties:
          status: 
            type: string
            description: Operation status
            example: fail
            default: fail
            enum:
              - fail
          message: 
            type: string
            description: Message
            example: Invalid credentials
            default: Invalid credentials
    '200':
      description: Success
      schema:
        type: object
        properties:
          token:
            type: string
            description: |
              Authentication token
          user:
            description: The authenticated user
            allOf:
              - $ref: 'definitions.yaml#/User'
  x-code-samples:
    - lang: 'Angular'
      source: |
        // login and store JWT to local storage
        let credentials = {'email': 'test@example.com', 'password':'secret'};
        this.http.post(`/api/authentication/`, credentials )
           .toPromise()
           .then(
             (response: any) => {
                localStorage.setItem('currentUser', JSON.stringify(response.user));
                localStorage.setItem('authToken',response.token)
                return response.user as User;
             },
             (response:any) => {
                console.log('Error: ')
                console.log(response.status);  // 401 - Unauthorized
             }
            )

        // later - provide token on http request
        let $token = localStorage.getItem('authToken',response.token)
        let headers = new HttpHeaders({ 'Authorization', `Bearer ${token}` });
        return this.http.post(`/api/endpoint/`, data, { headers: headers} );
delete:
  tags:
    - authentication
  summary: Logout User
  description: ''
  operationId: logoutUser
  consumes:
    - application/json
  produces:
    - application/json
  responses:
    '204':
      description: Success
    '400':
      description: No authenticated user
  x-code-samples:
    - lang: 'Angular'
      source: |
        this.http.delete(`/api/v1/authentication/` )
           .toPromise()
           .then(
             (response: any) => {
                localStorage.setItem('currentUser', null);
                localStorage.setItem('authToken', null)
                return response;
             },
             (response:any) => {
                console.log('Error: ')
                console.log(response.status);  // 400
             }
            )
patch:
  tags:
    - authentication
  summary: Activate User
  description: Activate a user using activation string
  operationId: activateUser
  consumes:
    - application/json
  produces:
    - application/json
  responses:
    '200':
      description: Success
      schema:
        type: object
        properties:
          status:
            type: string
            description: Operation status
            example: success
            default: success
            enum:
              - success
          message:
            type: string
            description: Message
            example: This account is now active.
            default: This account is now active.
    '400':
      description: Fail
      schema:
        type: object
        properties:
          status:
            type: string
            description: Operation status
            example: fail
            default: fail
            enum:
              - fail
          message:
            type: string
            description: Message
            example: Could not activate user  
            default: Could not activate user  
    '409':
      description: Duplicate request
      schema:
        type: object
        properties:
          status:
            type: string
            description: Operation status
            example: fail
            default: fail
            enum:
              - fail
          message:
            type: string
            description: Message
            example: This account is already active
            default: This account is already active
  x-code-samples:
    - lang: 'Angular'
      source: |
        this.http.patch(`/api/v1/authentication/`, {'key':'...'} )
           .toPromise()
           .then(
             (response: any) => {
                ...success...
             },
             (response:any) => {
                ...error...
             }
            )

swagger: '2.0'
schemes:
  - http
  - https
host: petstore.swagger.io
basePath: /api/v1/
info:
  description: |
    This is the documentation for the Doxa programming interface.
  version: 0.1.0
  title: Doxa API
  termsOfService: 'http://swagger.io/terms/'
  # contact:
  #   email: codewiseio@gmail.com
  #   url: ...
  # x-logo:
  #   url: 'https://rebilly.github.io/ReDoc/petstore-logo.png'
  license:
    name: None
    url: ''
# externalDocs:
#   description: Add some external documents here.
#   url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - name: doxa
    description: Common Belief Platform
securityDefinitions:
  Bearer:
    description: |
      Authentication using JWT and the "Authorization: Bearer ..." http headers.
    type: basic
    name: Authorization
    in: header
x-servers:
  - url: //localhost/v1/api
    description: Default server
  # - url: //petstore.swagger.io/sandbox
  #   description: Sandbox server
paths:
  '/authentication':
    post:
      tags:
        - authentication
      summary: Authenticate User
      description: Use an email and password to authenticate and login a user.
      operationId: loginUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User credentials
          required: true
          schema:
            type: object
            properties:
              email:
                description: Email address associated with the user
                type: string
                example: test@example.com
              password:
                description: Password
                type: string
                example: secret
      responses:
        '401':
          description: Unauthorized
          schema:
            type: object
            properties:
              status: 
                type: string
                description: Operation status
                example: unauthorized
                enum:
                  - unauthorized
              message: 
                type: string
                description: Message
                example: Invalid credentials
        '200':
          description: Login successful
          schema:
            type: object
            properties:
              token:
                type: string
                description: |
                  Authentication token
              user:
                description: The authenticated user
                allOf:
                  - $ref: '#/definitions/User'
      x-code-samples:
        - lang: 'Angular'
          source: |
            let credentials = {'email': 'test@example.com', 'password':'secret'};
            this.http.post(`${this.api}/authentication/`, credentials )
               .toPromise()
               .then(
                 (response: any) => {
                    localStorage.setItem('currentUser', JSON.stringify(response.user));
                    localStorage.setItem('authToken',response.token)
                    return response.user as User;
                 },
                 (response:any) => {
                    console.log('Error: ')
                    console.log(response.status);  // 401 - Unauthorized
                 }
                )
    delete:
      tags:
        - authentication
      summary: Logout User
      description: ''
      operationId: logoutUser
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '204':
          description: Success
        '400':
          description: No authenticated user
      x-code-samples:
        - lang: 'Angular'
          source: |
            this.http.delete(`/api/v1/authentication/` )
               .toPromise()
               .then(
                 (response: any) => {
                    localStorage.setItem('currentUser', null);
                    localStorage.setItem('authToken', null)
                    return response;
                 },
                 (response:any) => {
                    console.log('Error: ')
                    console.log(response.status);  // 400
                 }
                )
    patch:
      tags:
        - authentication
      summary: Activate User
      description: Activate a user using activation string
      operationId: activateUser
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              status:
                type: string
                description: Operation status
                example: success
                enum:
                  - success
                  - fail
              message:
                type: string
                description: Message
                example: This account is now active.
        '400':
          description: Fail
          schema:
            type: object
            properties:
              status:
                type: string
                description: Operation status
                example: fail
                enum:
                  - success
                  - fail
              message:
                type: string
                description: Message
                example: Could not activate user  
        '409':
          description: Account already active
          schema:
            type: object
            properties:
              status:
                type: string
                description: Operation status
                example: fail
                enum:
                  - success
                  - fail
              message:
                type: string
                description: Message
                example: This account is already active
      x-code-samples:
        - lang: 'Angular'
          source: |
            this.http.patch(`/api/v1/authentication/`, {'key':'...'} )
               .toPromise()
               .then(
                 (response: any) => {
                    ...success...
                 },
                 (response:any) => {
                    ...error...
                 }
                )
  '/users/':
    post:
      tags:
        - users
      summary: Create User
      description: |
        Unauthenticated users can register for new accounts. New `organization`, `person` and `contact` records will be
        created from supplied data.
      operationId: createUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User account
          required: true
          schema:
            type: object
            properties:
              email:
                description: Email address associated with the user
                type: string
                example: test@example.com
              password:
                description: Password
                type: string
                example: secret
              person:
                description: Person
                type: object
                required: true
                $ref: '#/definitions/Person'
              contacts:
                description: Contact Records
                type: array
                items:
                  $ref: '#/definitions/Contact'
              organization:
                description: Organization
                type: object
                required: true
                allOf:
                $ref: '#/definitions/Organization'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Fail
          schema:
            type: object
            properties:
              status: 
                type: string
                description: Status
                example: fail
                enum:
                  - fail
              message:
                type: string
                description: Message
                example: User could not be created with received data.
        '409':
          description: Conflict
          schema:
            type: object
            properties:
              status:
                type: string
                description: status
                example: fail
                enum:
                  - fail
              message:
                type: string
                description: Message
                example: This email is already in use.
    get:
      tags:
        - users
      summary: List Users
      description: List and search users. Only available to super users.
      operationId: listUsers
      consumes:
        - application/json
      produces:
        - application/json      
      responses:
        '200':
          description: Success
          schema:
            type: array
            $items:
              $ref: '#/definitions/User'            
        '403':
          description: Forbidden
          schema:
            type: object
            properties:
              status:
                description: Status
                type: string
                enum:
                  - fail
                example: fail
              message: 
                type: string
                description: Message
  '/users/{moniker}/':
    get:
      tags:
        - users
      summary: Retrieve User
      description: Retrieve user account.
      operatidId: retrieveUser
      consumes:
        - application/json
      produces:
        - application/json      
      responses:
        '200':
          description: Success
          schema:
              $ref: '#/definitions/User'            
    patch:
      tags:
        - users
      summary: Update User
      description: |
        Update credentials. You must be logged in and supply your password to make changes. 
        You only need to supply values for the fields you are updating.
      operatidId: updateUser
      consumes:
        - application/json
      produces:
        - application/json      
      responses:
        '200':
          description: Success
          schema:
              $ref: '#/definitions/User'
        '401':
          description: Unauthorized
          schema:
              type: object
              properties:
                status:
                  description: Status
                  example: fail
                  enum:
                    - fail
                message:
                   description: Message
                   example: Current password required
    delete:
      tags:
        - users
      summary: Delete User
      description: |
        Delete a user
      operatidId: deleteUser  
      responses:
        '204':
          description: Success
        '401':
          description: Unauthorized
          schema:
              type: object
              properties:
                status:
                  description: Status
                  example: fail
                  enum:
                    - fail
                message:
                   description: Message
                   example: Current password required
  '/users/password/':
    post:
      tags:
        - users
      summary: Reset Password Request
      description: |
        Request a password reset link be sent to the supplied email address. Links are only valid for 30 minutes.
      operationId: resetPasswordRequest
      consumes:
        - application/json
      produces:
        - application/json      
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              status:
                description: Status
                type: string
                enum:
                  - success
                example: success
              message: 
                description: message
                type: string
                example: A password reset link has been sent to this email address.
        '404':
          description: Not found
          schema:
            type: object
            properties:
              status:
                description: Status
                type: string
                enum:
                  - fail
                example: fail
              message: 
                description: message
                type: string
                example: No user with this email address.
        '400':
          description: Disabled user
          schema:
            type: object
            properties:
              status:
                description: Status
                type: string
                enum:
                  - fail
                example: fail
              message: 
                description: message
                type: string
                example: This user has been disabled.
    patch:
      tags:
        - users
      summary: Reset Password
      description: |
        Perform a password reset using a password reset key.
      operationId: resetPassword
      consumes:
        - application/json
      produces:
        - application/json      
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              status:
                description: Status
                type: string
                enum:
                  - success
                example: success
              message: 
                description: Message
                type: string
                example: Password has been changed.
        '404':
          description: Not found
          schema:
            type: object
            properties:
              status:
                description: Status
                type: string
                enum:
                  - fail
                example: fail
              message: 
                description: Message
                type: string
                example: This password reset key is not valid.
        '410':
          description: Expired
          schema:
            type: object
            properties:
              status:
                description: Status
                type: string
                enum:
                  - fail
                example: fail
              message: 
                description: Message
                type: string
                example: This password reset key has expired.
                default: This password reset key has expired.
        '403':
          description: Forbidden
          schema:
            type: object
            properties:
              status:
                description: Status
                type: string
                enum:
                  - fail
                example: fail
              message: 
                description: message
                type: string
                example: This account has been disabled.
    get:
      tags:
        - users
      summary: Validate Password Reset Key
      description: |
        Check a password reset key for validity, reporting that it is valid,
        expired or used. This is useful when users follow a link from an email. The
        application can then validate the password reset key and provide feedback to the
        user if the link is expired or invalid.
      operationId: validateResetPasswordKey
      produces:
        - application/json      
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              status:
                description: Status
                type: string
                enum:
                  - success
                example: success
              message: 
                description: Message
                type: string
                example: Password reset key is valid.
        '404':
          description: Not found
          schema:
            type: object
            properties:
              status:
                description: Status
                type: string
                enum:
                  - fail
                example: fail
              message: 
                description: Message
                type: string
                example: This password reset key is not valid.
        '410':
          description: Expired
          schema:
            type: object
            properties:
              status:
                description: Status
                type: string
                enum:
                  - fail
                example: fail
              message: 
                description: Message
                type: string
                example: This password reset key has expired.
                default: This password reset key has expired.
        '403':
          description: Forbidden
          schema:
            type: object
            properties:
              status:
                description: Status
                type: string
                enum:
                  - fail
                example: fail
              message: 
                description: message
                type: string
                example: This account has been disabled.

  /users/email/:
    get:
      tags:
        - users
      summary: Validate Email
      description: |
        Check if the supplied email address is valid and not in use
        by another user.
      operationId: validateEmail
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              valid:
                description: Valid
                type: boolean
                enum:
                  - "true"
                  - "false"
                example: "false"
              message: 
                description: Message
                type: string
                example: This email is already in use.        
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma seperated strings
      operationId: findPetsByStatus
      produces:
        - application/xml
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: 'Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.'
      operationId: findPetsByTags
      deprecated: true
      produces:
        - application/xml
        - application/json
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: ''
      operationId: placeOrder
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: order placed for purchasing the pet
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid Order
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: 'For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions'
      operationId: getOrderById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          type: integer
          maximum: 5
          minimum: 1
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          type: string
          minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          examples:
            application/json: OK
            application/xml: <message> OK </message>
            text/plain: OK
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when toekn expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
definitions:
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
  Cat:
    description: A representation of a cat
    allOf:
      - $ref: '#/definitions/Pet'
      - type: object
        properties:
          huntingSkill:
            type: string
            description: The measured skill for hunting
            default: lazy
            enum:
              - clueless
              - lazy
              - adventurous
              - aggressive
        required:
          - huntingSkill
  Category:
    type: object
    properties:
      id:
        description: Category ID
        allOf:
          - $ref: '#/definitions/Id'
      name:
        description: Category name
        type: string
        minLength: 1
      sub:
        description: Test Sub Category
        type: object
        properties:
          prop1:
            type: string
            description: Dumb Property
    xml:
      name: Category
  Dog:
    description: A representation of a dog
    allOf:
      - $ref: '#/definitions/Pet'
      - type: object
        properties:
          packSize:
            type: integer
            format: int32
            description: The size of the pack the dog is from
            default: 1
            minimum: 1
        required:
          - packSize
  HoneyBee:
    description: A representation of a honey bee
    allOf:
      - $ref: '#/definitions/Pet'
      - type: object
        properties:
          honeyPerDay:
            type: number
            description: Average amount of honey produced per day in ounces
            example: 3.14
        required:
          - honeyPerDay
  Id:
    type: integer
    format: int64
  Moniker:
    type: string
  Order:
    type: object
    properties:
      id:
        description: Order ID
        allOf:
          - $ref: '#/definitions/Id'
      petId:
        description: Pet ID
        allOf:
          - $ref: '#/definitions/Id'
      quantity:
        type: integer
        format: int32
        minimum: 1
        default: 1
      shipDate:
        description: Estimated ship date
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
      complete:
        description: Indicates whenever order was completed or not
        type: boolean
        default: false
    xml:
      name: Order
  Pet:
    type: object
    required:
      - name
      - photoUrls
    discriminator: petType
    properties:
      id:
        description: Pet ID
        allOf:
          - $ref: '#/definitions/Id'
      category:
        description: Categories this pet belongs to
        allOf:
          - $ref: '#/definitions/Category'
      name:
        description: The name given to a pet
        type: string
        example: Guru
      photoUrls:
        description: The list of URL to a cute photos featuring pet
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
          format: url
      tags:
        description: Tags attached to the pet
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: Pet status in the store
        enum:
          - available
          - pending
          - sold
      petType:
        description: Type of a pet
        type: string
    xml:
      name: Pet
  Tag:
    type: object
    properties:
      id:
        description: Tag ID
        allOf:
          - $ref: '#/definitions/Id'
      name:
        description: Tag name
        type: string
        minLength: 1
    xml:
      name: Tag
  User:
    type: object
    properties:
      moniker:
        description: Moniker
        type: string
        example: user:1
        format: 'entity:id'
      email:
        description: User email address
        type: string
        format: email
        example: john.smith@example.com
      password:
        type: string
        description: 'User password'
        format: password
        minLength: 8
        pattern: '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])'
        example: drowssaP123
      status:
        description: User status
        type: string
        enum:
          - disabled
          - inactive
          - active
        default: inactive
        example: active
    xml:
      name: User

  Person:
    type: 'object'
    properties:
      moniker:
        description: Moniker
        type: string
        example: 'person:1'
        format: 'entity:id'
      first_name:
        description: First Name
        type: string
        example: Elvis
      middle_name:      
        description: Middle Name
        type: string
        example: Aaraon
      last_name:      
        description: Last Name
        type: string
        example: Presley
      birthday:
        description: Birthday
        type: string
        format: date
        example: '1985-01-08'
      gender:
        description: Gender
        type: string
        format: varchar(1)
        enum:
          - m
          - f
        example: m

  Contact:
    type: object
    properties:
      moniker:
        description: Moniker
        type: string
        example: 'contact:1'
        format: 'entity:id'  
      type:
        description: Type
        type: string
        example: Telephone
        enum:
          - Telephone
          - Email
          - Chat
          - Profile
      label:
        description: Label
        type: string
        example: Home
      value:   
        description: Value
        type: string
        example: '+1 555 555 5555'

  Organization:
    type: object
    properties:
      moniker:
        description: Moniker
        type: string
        example: 'organization:1'
        format: 'entity:id'  
      name:
        description: Name
        type: string
        example: Umbrella Corporation
      description:
        description: Label
        type: string
        example: Umbrella Corporation is one of the world's leading biotechnology conglomerates.
  GenericResponse:
    type: object
    properties:
      status:
        type: string
        description: Operation status
        example: success
        enum:
          - success
          - fail
      message:
        type: string
        description: Message
        example: This account is now active.

'/xsrf-token/':
  get:
    tags:
      - xsrf
    summary: Retrieve Token
    description: Provide a xsrf token for api clients. Clients 
      must send the token on all modifying requests, put, patch, and delete.
    operationId: xsrfToken
    produces:
      - application/json
    responses:
      '200':
        description: Success
        schema:
          type: none
'/authentication':
  post:
    tags:
      - authentication
    summary: Authenticate User
    description: Use an email and password to authenticate and login a user.
    operationId: loginUser
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        description: User credentials
        required: true
        schema:
          type: object
          properties:
            email:
              description: Email address associated with the user
              type: string
              example: test@example.com
            password:
              description: Password
              type: string
              example: secret
    responses:
      '401':
        description: Unauthorized
        schema:
          type: object
          properties:
            status: 
              type: string
              description: Operation status
              example: fail
              default: fail
              enum:
                - fail
            message: 
              type: string
              description: Message
              example: Invalid credentials
              default: Invalid credentials
      '200':
        description: Success
        schema:
          type: object
          properties:
            token:
              type: string
              description: |
                Authentication token
            user:
              description: The authenticated user
              allOf:
                - $ref: 'definitions.yaml#/definitions/User'
    x-code-samples:
      - lang: 'Angular'
        source: |
          // login and store JWT to local storage
          let credentials = {'email': 'test@example.com', 'password':'secret'};
          this.http.post(`/api/authentication/`, credentials )
             .toPromise()
             .then(
               (response: any) => {
                  localStorage.setItem('currentUser', JSON.stringify(response.user));
                  localStorage.setItem('authToken',response.token)
                  return response.user as User;
               },
               (response:any) => {
                  console.log('Error: ')
                  console.log(response.status);  // 401 - Unauthorized
               }
              )

          // later - provide token on http request
          let $token = localStorage.getItem('authToken',response.token)
          let headers = new HttpHeaders({ 'Authorization', `Bearer ${token}` });
          return this.http.post(`/api/endpoint/`, data, { headers: headers} );
  delete:
    tags:
      - authentication
    summary: Logout User
    description: ''
    operationId: logoutUser
    consumes:
      - application/json
    produces:
      - application/json
    responses:
      '204':
        description: Success
      '400':
        description: No authenticated user
    x-code-samples:
      - lang: 'Angular'
        source: |
          this.http.delete(`/api/v1/authentication/` )
             .toPromise()
             .then(
               (response: any) => {
                  localStorage.setItem('currentUser', null);
                  localStorage.setItem('authToken', null)
                  return response;
               },
               (response:any) => {
                  console.log('Error: ')
                  console.log(response.status);  // 400
               }
              )
  patch:
    tags:
      - authentication
    summary: Activate User
    description: Activate a user using activation string
    operationId: activateUser
    consumes:
      - application/json
    produces:
      - application/json
    responses:
      '200':
        description: Success
        schema:
          type: object
          properties:
            status:
              type: string
              description: Operation status
              example: success
              default: success
              enum:
                - success
            message:
              type: string
              description: Message
              example: This account is now active.
              default: This account is now active.
      '400':
        description: Fail
        schema:
          type: object
          properties:
            status:
              type: string
              description: Operation status
              example: fail
              default: fail
              enum:
                - fail
            message:
              type: string
              description: Message
              example: Could not activate user  
              default: Could not activate user  
      '409':
        description: Duplicate request
        schema:
          type: object
          properties:
            status:
              type: string
              description: Operation status
              example: fail
              default: fail
              enum:
                - fail
            message:
              type: string
              description: Message
              example: This account is already active
              default: This account is already active
    x-code-samples:
      - lang: 'Angular'
        source: |
          this.http.patch(`/api/v1/authentication/`, {'key':'...'} )
             .toPromise()
             .then(
               (response: any) => {
                  ...success...
               },
               (response:any) => {
                  ...error...
               }
              )
'/users/':
  post:
    tags:
      - users
    summary: Create User
    description: |
      Unauthenticated users can register for new accounts. New `organization`, `person` and `contact` records will be
      created from supplied data.
    operationId: createUser
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        description: User account
        required: true
        schema:
          type: object
          properties:
            email:
              description: Email address associated with the user
              type: string
              example: test@example.com
            password:
              description: Password
              type: string
              example: secret
            person:
              description: Person
              type: object
              required: true
              $ref: 'definitions.yaml#/definitions/Person'
            contacts:
              description: Contact Records
              type: array
              items:
                $ref: 'definitions.yaml#/definitions/Contact'
            organization:
              description: Organization
              type: object
              required: true
              allOf:
              $ref: 'definitions.yaml#/definitions/Organization'
    responses:
      '201':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/User'
      '400':
        description: Fail
        schema:
          type: object
          properties:
            status: 
              type: string
              description: Status
              example: fail
              enum:
                - fail
            message:
              type: string
              description: Message
              example: User could not be created with received data.
      '409':
        description: Conflict
        schema:
          type: object
          properties:
            status:
              type: string
              description: status
              example: fail
              enum:
                - fail
            message:
              type: string
              description: Message
              example: This email is already in use.
  get:
    tags:
      - users
    summary: List Users
    description: List and search users. Only available to super users.
    operationId: listUsers
    consumes:
      - application/json
    produces:
      - application/json      
    responses:
      '200':
        description: Success
        schema:
          type: array
          items:
            $ref: 'definitions.yaml#/definitions/User'            
      '403':
        description: Forbidden
        schema:
          type: object
          properties:
            status:
              description: Status
              type: string
              enum:
                - fail
              example: fail
            message: 
              type: string
              description: Message
'/users/{moniker}/':
  get:
    tags:
      - users
    summary: Retrieve User
    description: Retrieve user account.
    operatidId: retrieveUser
    consumes:
      - application/json
    produces:
      - application/json      
    responses:
      '200':
        description: Success
        schema:
            $ref: 'definitions.yaml#/definitions/User'            
  patch:
    tags:
      - users
    summary: Update User
    description: |
      Update credentials. You must be logged in and supply your password to make changes. 
      You only need to supply values for the fields you are updating.
    operatidId: updateUser
    consumes:
      - application/json
    produces:
      - application/json      
    responses:
      '200':
        description: Success
        schema:
            $ref: 'definitions.yaml#/definitions/User'
      '401':
        description: Unauthorized
        schema:
            type: object
            properties:
              status:
                description: Status
                example: fail
                enum:
                  - fail
              message:
                 description: Message
                 example: Current password required
  delete:
    tags:
      - users
    summary: Delete User
    description: |
      Delete a user
    operatidId: deleteUser  
    responses:
      '204':
        description: Success
      '401':
        description: Unauthorized
        schema:
            type: object
            properties:
              status:
                description: Status
                example: fail
                default: fail
                enum:
                  - fail
              message:
                 description: Message
                 example: Current password required
                 default: Current password required
'/users/password/':
  post:
    tags:
      - users
    summary: Reset Password Request
    description: |
      Request a password reset link be sent to the supplied email address. Links are only valid for 30 minutes.
    operationId: resetPasswordRequest
    consumes:
      - application/json
    produces:
      - application/json      
    responses:
      '200':
        description: Success
        schema:
          type: object
          properties:
            status:
              description: Status
              type: string
              enum:
                - success
              example: success
              default: success
            message: 
              description: Message
              type: string
              example: A password reset link has been sent to this email address.
              default: A password reset link has been sent to this email address.
      '404':
        description: Not found
        schema:
          type: object
          properties:
            status:
              description: Status
              type: string
              enum:
                - fail
              example: fail
              default: fail
            message: 
              description: Message
              type: string
              example: No user with this email address.
              default: No user with this email address.
      '400':
        description: Disabled user
        schema:
          type: object
          properties:
            status:
              description: Status
              type: string
              enum:
                - fail
              example: fail
              default: fail
            message: 
              description: Message
              type: string
              example: This user has been disabled.
              default: This user has been disabled.
  patch:
    tags:
      - users
    summary: Reset Password
    description: |
      Perform a password reset using a password reset key.
    operationId: resetPassword
    consumes:
      - application/json
    produces:
      - application/json      
    responses:
      '200':
        description: Success
        schema:
          type: object
          properties:
            status:
              description: Status
              type: string
              enum:
                - success
              example: success
              default: success
            message: 
              description: Message
              type: string
              example: Password has been changed.
              default: Password has been changed.
      '404':
        description: Not found
        schema:
          type: object
          properties:
            status:
              description: Status
              type: string
              enum:
                - fail
              example: fail
              default: fail
            message: 
              description: Message
              type: string
              example: This password reset key is not valid.
              default: This password reset key is not valid.
      '410':
        description: Expired
        schema:
          type: object
          properties:
            status:
              description: Status
              type: string
              enum:
                - fail
              example: fail
            message: 
              description: Message
              type: string
              example: This password reset key has expired.
              default: This password reset key has expired.
      '403':
        description: Forbidden
        schema:
          type: object
          properties:
            status:
              description: Status
              type: string
              enum:
                - fail
              example: fail
              default: fail
            message: 
              description: message
              type: string
              example: This account has been disabled.
              default: This account has been disabled.
  get:
    tags:
      - users
    summary: Validate Password Reset Key
    description: |
      Check a password reset key for validity, reporting that it is valid,
      expired or used. This is useful when users follow a link from an email. The
      application can then validate the password reset key and provide feedback to the
      user if the link is expired or invalid.
    operationId: validateResetPasswordKey
    produces:
      - application/json      
    responses:
      '200':
        description: Success
        schema:
          type: object
          properties:
            status:
              description: Status
              type: string
              enum:
                - success
              example: success
              default: success
            message: 
              description: Message
              type: string
              example: Password reset key is valid.
              default: Password reset key is valid.
      '404':
        description: Not found
        schema:
          type: object
          properties:
            status:
              description: Status
              type: string
              enum:
                - fail
              example: fail
              default: fail
            message: 
              description: Message
              type: string
              example: This password reset key is not valid.
              default: This password reset key is not valid.
      '410':
        description: Expired
        schema:
          type: object
          properties:
            status:
              description: Status
              type: tring
              enum:
                - fail
              example: fail
              default: fail
            message: 
              description: Message
              type: string
              example: This password reset key has expired.
              default: This password reset key has expired.
      '403':
        description: Forbidden
        schema:
          type: object
          properties:
            status:
              description: Status
              type: string
              enum:
                - fail
              example: fail
              default: fail
            message: 
              description: message
              type: string
              example: This account has been disabled.
              default: This account has been disabled.
'/users/email/':
  get:
    tags:
      - users
    summary: Validate Email
    description: |
      Check if the supplied email address is valid and not in use
      by another user.
    operationId: validateEmail
    produces:
      - application/json
    responses:
      '200':
        description: Success
        schema:
          type: object
          properties:
            valid:
              description: Valid
              type: boolean
              enum:
                - "true"
                - "false"
              example: "false"
              default: "true"
            message: 
              description: Message
              type: string
              example: This email is already in use.        
              default: This email is already in use.   
'/groups/':
  get:
    tags:
      - groups
    summary: List
    produces:
      - application/json
    responses:
      '200':
        description: Success
        schema:
          type: array
          items: 
            - $ref: 'definitions.yaml#/definitions/Group'
  post:
    tags: 
      - groups
    summary: Create
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        description: Group details
        required: true
        schema:
          allOf:
            - $ref: 'definitions.yaml#/definitions/Group'
            - properties:
                contacts:
                  description: Contact Records
                  type: array
                  items:
                    $ref: 'definitions.yaml#/definitions/Contact'
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Group'

'/groups/{moniker}/':
  get:
    tags:
      - groups
    summary: Retrieve
    description: Retrieve
    operationId: retrieveGroup
    produces:
      - application/json      
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Group'
  patch:
    tags:
      - groups
    summary: Update
    descrition: Update
    operationId: updateGroup
    consumes:
      - application/json
    produces:
      - application/json    
    parameters:
      - in: body
        name: body
        description: Group details
        required: true
        schema:
          type: object
          allOf:
            - $ref: 'definitions.yaml#/definitions/Group'      
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Group'
  delete:
    tags:
      - groups
    summary: Delete
    descrition: Delete 
    operationId: deleteGroup
    produces:
      - application/json       
    responses:
      '200':
        description: Success





'/members/':
  get:
    tags:
      - members
    summary: List
    description: Retrieve a list of  based on search criteria
    operationId: listMembers
    produces:
      - application/json
    responses:
      '200':
        description: Success
        schema:
          type: array
        items: 
          - $ref: 'definitions.yaml#/definitions/Member'
  post:
    tags: 
      - members
    summary: Create
    description: Create a new members
    operationId: createMember
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        description: Member details
        required: true
        schema:
          type: object
          properties:
            allOf:
              - $ref: 'definitions.yaml#/definitions/Member'
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Member'
'/members/{moniker}/':
  get:
    tags:
      - members
    summary: Retrieve
    description: Retrieve
    operationId: retrieveMember
    produces:
      - application/json      
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Member'
  patch:
    tags:
      - members
    summary: Update
    descrition: Update
    operationId: updateMember
    consumes:
      - application/json
    produces:
      - application/json    
    parameters:
      - in: body
        name: body
        description: Member details
        required: true
        schema:
          type: object
          properties:
            allOf:
              - $ref: 'definitions.yaml#/definitions/Member'      
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Member'
  delete:
    tags:
      - members
    summary: Delete
    descrition: Delete 
    operationId: deleteMember
    produces:
      - application/json       
    responses:
      '200':
        description: Success  



        
'/organizations/':
  get:
    tags:
      - organizations
    summary: List
    produces:
      - application/json
    responses:
      '200':
        description: Success
        schema:
          type: array
          items: 
            - $ref: 'definitions.yaml#/definitions/Organization'
  post:
    tags: 
      - organizations
    summary: Create
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        description: Organization details
        required: true
        schema:
          allOf:
            - $ref: 'definitions.yaml#/definitions/Organization'
            - properties:
                contacts:
                  description: Contact Records
                  type: array
                  items:
                    $ref: 'definitions.yaml#/definitions/Contact'
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Organization'

'/organizations/{moniker}/':
  get:
    tags:
      - organizations
    summary: Retrieve
    description: Retrieve
    operationId: retrieveOrganization
    produces:
      - application/json      
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Organization'
  patch:
    tags:
      - organizations
    summary: Update
    descrition: Update
    operationId: updateOrganization
    consumes:
      - application/json
    produces:
      - application/json    
    parameters:
      - in: body
        name: body
        description: Organization details
        required: true
        schema:
          type: object
          allOf:
            - $ref: 'definitions.yaml#/definitions/Organization'      
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Organization'
  delete:
    tags:
      - organizations
    summary: Delete
    descrition: Delete 
    operationId: deleteOrganization
    produces:
      - application/json       
    responses:
      '200':
        description: Success





'/attendees/':
  get:
    tags:
      - attendees
    summary: List
    description: Retrieve a list of based on search criteria
    operationId: listAttendees
    produces:
      - application/json
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Attendee'
  post:
    tags: 
      - attendees
    summary: Create
    description: Create a new attendees
    operationId: createAttendee
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        description: Attendee details
        required: true
        schema:
          type: object
          properties:
            allOf:
              - $ref: 'definitions.yaml#/definitions/Attendee'
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Attendee'
'/attendees/{moniker}/':
  get:
    tags:
      - attendees
    summary: Retrieve
    description: Retrieve
    operationId: retrieveAttendee
    produces:
      - application/json      
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Attendee'
  patch:
    tags:
      - attendees
    summary: Update
    descrition: Update
    operationId: updateAttendee
    consumes:
      - application/json
    produces:
      - application/json    
    parameters:
      - in: body
        name: body
        description: Attendee details
        required: true
        schema:
          type: object
          properties:
            allOf:
              - $ref: 'definitions.yaml#/definitions/Attendee'      
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Attendee'
  delete:
    tags:
      - attendees
    summary: Delete
    descrition: Delete 
    operationId: deleteAttendee
    produces:
      - application/json       
    responses:
      '200':
        description: Success


'/contacts/':
  get:
    tags:
      - contacts
    summary: List
    description: Retrieve a list of based on search criteria
    operationId: listContacts
    produces:
      - application/json
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Contact'
  post:
    tags: 
      - contacts
    summary: Create
    description: Create a new contacts
    operationId: createContact
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        description: Contact details
        required: true
        schema:
          type: object
          properties:
            allOf:
              - $ref: 'definitions.yaml#/definitions/Contact'
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Contact'
'/contacts/{moniker}/':
  get:
    tags:
      - contacts
    summary: Retrieve
    description: Retrieve
    operationId: retrieveContact
    produces:
      - application/json      
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Contact'
  patch:
    tags:
      - contacts
    summary: Update
    descrition: Update
    operationId: updateContact
    consumes:
      - application/json
    produces:
      - application/json    
    parameters:
      - in: body
        name: body
        description: Contact details
        required: true
        schema:
          type: object
          properties:
            allOf:
              - $ref: 'definitions.yaml#/definitions/Contact'      
    responses:
      '200':
        description: Success
        schema:
          $ref: 'definitions.yaml#/definitions/Contact'
  delete:
    tags:
      - contacts
    summary: Delete
    descrition: Delete 
    operationId: deleteContact
    produces:
      - application/json       
    responses:
      '200':
        description: Success

